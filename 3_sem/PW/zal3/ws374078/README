Opis rozwiązania:

Implementacja:
    
    Program najpierw wczytuje dane, za każdym razem sprawdza istnienie cykli.
    Stopniowo są budowane wezły oraz łacza pomiędzy nimi.

    Kiedy obwód już jest stworzony, program wczytuje listy inicjalizacji.
    Weżly zmiennych dostają wiadomośc z wartościowaniem (jeśli jest) oraz z id
    listy inicjalizacji. Wartości stałe też dostają id listy (w obu
    przypadkach procesy dostają to id tylko jeśli ta lista jest poprawna). 
    Dalej zachowanie zależy od typu węzła:

    valueNode - przesyła swoją wartość i id listy od razu
    variableNode - jeśli ma wartość, przesyła od razu, inaczej czeka na
    obliczenie od węzłów wyżej. Jeśli takich nie ma, to przesyła undefined.

    unaryOperationNode - odczytuje wartości i od razy przesyła je dalej po
    przemnożeniu na -1.

    binaryOperationNode - ma listę otrzymanych wartości. Jeśli otrzymuje 2
    wartości o tym samym numerze listy inicjalizacji, to przesyła wynik
    operacji dalej. Jeśli ma jedną wartość, to czeka na drugą, chyba że ta 
    wartość jest undefined. Wtedy od razy przesyła undefined dalej.

    Proces główny ma łacza do każdego węzły żeby móc wyśłać EXIT_MESSAGE żeby
    zakończyć pracę.
    Proces główny też ma łączę do korzenia, od którego pobiera wyniki
    obliczeń.

Pliki pomocznicze:
    list - implementacja listy int albo node

    node - implementacja i pomocnicze funkcje struktury dla weżłów. Ta
    struktura zawiera potrzebną informację dla uruchomiena procesu.

    typedef struct node {
        int mainWriteDescriptor; // łącza z procesem głównym

        list_ptr inputDescriptors; // list deskryptorów wejścia

        list_ptr outputDescriptors; // list deskryptorów wyjścia

        char operation; // operacja, jest używana tylko dla 
        BINARY_OPERATION_NODE (wtedy to może być + albo *)
        albo dla UNARY_OPERATION_NODE (wtedy to jest -)

        long val; // wartość, jest używana w valueNode oraz w variableNode
        int type; // typ weżła
        struct message **receivedVals; // zawiera wiadomości otrzymane przez
        binaryOperation. Za pomocą tej tablicy binaryOperationNode może
        stwierdzić, czy już ma pierwszą wartość dla konkretnego id listy
        inicjalizacji 
        nie jest używana przez inne typy węzłów

        int *isProcessed; // tablica, która zawiera informacje o tym, które
        id listy inicjalizacji już zostały opracowane
        jest używane przez binaryOperationNode oraz variableNode

    } node_t, *node_ptr;

    utility - wykonuje odzczyt i zapisywanie w pipe, tworzenie pipe, budowa grafu,
    wykrycie cykli, budowa obwodu za pomocą ONP (Odwrotnej Notacji Polskiej). 

    message - struktura, która jest używana dla przekazywania informacji
    pomiędzy procesami

    typedef struct message {
        int type; // typ wiadomości
        long value; // wartość
        int init_id; // id listy inicjalizacji
    } message_t, *message_ptr;

    typy są następujące

    START_MESSAGE - wiadomość start, wysyłana do variableNode (jeśli nie ma
    wartości początkowej) oraz do valueNode. value nie jest używane

    EXIT_MESSAGE  - wiadomość, wysyłana do wszystkich procesorów po otrzymaniu
    wyników dla wszystkich potrzebnych wartościowań. init_id oraz value nie są
    używane

    START_WITH_VAL_MESSAGE - wiadomość, wysyłana do variableNode kiedy zmienna
    ma początkową wartość. value równia się tej początkowej wartości

    RESULT_MESSAGE - wiadomość wysyłana do zależących węzłow przez weżły, które 
    pomyślnie obliczyły swoją wartość 

    UNDEFINED_RESULT_MESSAGE - wiadomość wysyłana do zależących węzłow przez weżły, 
    które nie mogli obliczyć swoją wartość. 
